---
layout: post
title:  "Today I Learn"
date:   2023-10-19 13:27:00 +0900
categories: article
---

### 오늘 읽은 개발 관련 아티클

[당근 리브랜딩 캠페인 페이지를 개발하며 배운 것][danggn-rebranding]

출처: 당근 미디엄

### 브레이크 포인트 잘 나누기

브레이크 포인트는 반응형 웹에서 사이즈가 변화하는 지점을 말하는데요. 어떤 크기의 화면으로, 어떤 환경에서 사이트를 보더라도 모두 불편함 없는 유려한 경험을 주기 위해 브레이크 포인트를 잘 나누는 게 중요해요. 저는 처음부터 브레이크 포인트를 조금 여유롭게 잡았어요.

1. 0px ~ 360px 
2. 360px ~ 768px
3. 768px ~ 990px
4. 990px ~ 1200px
5. 1200px ~

정확하게 말하면 360px ~ 768px 이 부분이 조금 문제가 됐어요. 해당 브레이크 포인트에 작업을 하면 361px과 767px을 동시에 고려한다는 의미가 돼요. 모바일과 태블릿 크기의 기기에서 같은 레이아웃을 가진다면 크게 문제가 되지 않지만, 만약 둘의 레이아웃이 다르다면 그때부터 많이 힘들어져요.

처음부터 “스마트폰, 태블릿”이 아니라 “작은 스마트폰, 큰 스마트폰, 태블릿”으로 나눠서 갔으면 수월하게 작업했을 것 같아요.

1. 0px ~ 360px (작은 스마트폰)
2. 360px ~ 480px (큰 스마트폰)
3. 480px ~ 768px (작은 태블릿)
4. 768px ~ 990px (큰 태블릿)
5. 990px ~ 1200px (작은 데스크탑)
6. 1200px ~ (큰 데스크탑)


### 처음부터 안드로이드, iOS 에뮬레이터를 켜고 개발을 하자.

저는 보통 랜딩 페이지 개발을 할 때 데스크탑 유저를 중심으로 생각했는데요. 이번 프로젝트는 당근 앱으로 월 1800만 명의 사용자에게 소식을 전하는 만큼, 모바일 유저의 경험도 주요하게 살폈어요. 그런데 실제로 리브랜딩 랜딩 페이지를 오픈하려고 살펴보니 모바일 사용량이 압도적으로 많더라고요. 그중에서도 안드로이드 유저가 정말 많다는 사실을 발견하며 사용자에 대해 다시 한번 이해할 수 있게 되었어요.

랜딩 페이지 개발을 할 때 항상 크롬 브라우저를 켜놓고 개발했어요. 랜딩 페이지 개발 막바지 거의 1–2주간은 android 기기에서의 이슈를 해결하는데 시간을 쓴 것 같아요. 차라리 안드로이드 에뮬레이터를 켜고 거기에서 로컬로 띄워서 개발을 시작했다면 돌아가는 시간이 더 적지 않았을까 하는 생각이 드네요.

이처럼 자신이 만들고 있는 랜딩 페이지가 대상으로 하는 유저를 처음부터 잘 생각하고, 우선순위를 잘 따지는 게 중요해요.

### 라이브러리 선택을 할 땐 최대한 메이저 라이브러리를 선택하자.

랜딩 페이지를 만들 때 스크롤 트랜지션과 같은 애니메이션을 도와주는 라이브러리인 gsap 를 사용했어요. 그리고 해당 라이브러리를 한 번 감싸서 React Component로 만들어 놓고 애니메이션을 선언적으로 사용할 수 있는 라이브러리인 react-gsap이 있었어요.

저는 React를 사용하고 있기도 했고, 리액트 컴포넌트로 선언해서 사용하는 방식이 애니메이션이 어떻게 흘러가는지 직관적이기도 해서 react-gsap 를 사용했어요.

결론을 말하자면 프로젝트 막바지에는 gsap 로 마이그레이션 했어요.

브레이크 포인트별로 애니메이션과 트렌지션을 따로 걸어줘야 하는 상황이 있었는데 react-gsap 에는 클라이언트 사이드에서 어떤 애니메이션을 보여줘야 하는지 결정하는 순간에 충돌이 나는 이슈가 있었고, 따로 브레이크 포인트와 관련된 인터페이스를 제공해 주지 않았어요.

하지만 gsap 라이브러리에는 브레이크 포인트와 관련된 인터페이스가 있었어요. react-gsap 가 gsap 의 인터페이스를 그대로 pass 해주고 있지도 않고, 문서도 잘 적혀있지도 않았어요.

제가 오픈소스 제공자라고 해도 메인 라이브러리인 gsap 를 먼저 고치고 문서도 고치지, 그 외에 파생된 라이브러리는 업데이트가 그보다 느리고, 관리도 덜 될 것 같아요. 항상 정상적인 동작만 생각해서 정상적으로 동작했으면 좋겠지만 여러 가지 요인들 때문에 그렇지 못할 가능성이 높아요.

라이브러리 선택할 땐 최대한 메이저 라이브러리를 선택하지, 정말 급한 경우가 아니라면 파생된 라이브러리를 선택하는 일은 지양해야 할 것 같아요.

### 모바일 hover 스타일링

- 보통 hover 스타일링을 할 때 아래와 같이 스타일링을 할 텐데 모바일에서 hover를 아래와 같이 스타일링하면 hover가 된 상태로 포커스가 옮겨가기 전까지 hover를 유지하는 현상이 있어요.

{% highlight html %}
div:hover {
    color: "black"
}
{% endhighlight %}

본래 hover라는 이벤트가 “마우스”를 올렸을 때 일어나는 이벤트인데, 모바일 기기 마우스가 없기 때문에 이벤트의 발생과 종료가 애매해요.

그래서 hover media query를 통해서 기본적으로 현재 기기가 호버 메커니즘을 지원하는지 여부에 따라서 스타일링을 할 수 있어요.

{% highlight html %}
@media (hover: hover) {
    /* when hover is supported */
    a:hover {
        color: white;
        background: black;
    }
}
{% endhighlight %}

### 안드로이드 웹뷰에서 강제 다크모드가 적용되는 것에 대해서

- 회사마다 안드로이드 환경에서 웹뷰의 다크모드에 대한 설정이 다 다르겠지만, 만약 랜딩 페이지가 오직 라이트 모드에서만 동작을 원한다고 해도 meta 설정을 해야 해요. 그렇지 않으면 유저의 시스템 테마를 보고 강제로 다크로 입히는 설정이 안드로이드에 있어요.

- 그렇기에 오직 라이트모드로 디자인이 되어있더라도, 혹은 반대로 다크모드로만 의도된 디자인이더라도, 우리는 루트나 메타 태그로 color-scheme을 명시해야 해요. 그렇지 않으면 시스템 테마에 의해 원하지 않는 컬러가 들어갈 수도 있어요.

- 제가 헷갈렸던 부분은 ‘color-scheme: dark light가 아니라 only light 가 되어야 하는 게 아닌가?’하는 부분이었는데, 이후 살펴보니 애초에 color-scheme을 아예 제공해 주지 않아서 값이 normal 로 들어가서 유저 에이전트에 의해서 원치 않는 테마가 들어간 것이 문제였다는 걸 발견했어요. 따라서dark light 라도 명시를 해줬다는 것이 중요해요.

- 그리고 only light로 더 명시적으로 할 수도 있다는 것을 새롭게 알게 됐어요.

- dark light로 지정해도 이 페이지가 “dark와 light를 제공할 수도(강조) 있다.” 인 거지 “dark와 light를 무조건 지원한다” 가 아니에요.

- 따라서 개발자가 아래와 같은 코드로 dark 모드에 대한 스타일이 지정이 되어있으면, 개발자의 의도대로 동작한다는 얘기예요. 이게 없으면 위에서 말한 것처럼 유저 시스템 테마에 의해 원치 않는 스타일이 들어갈 수 있어요.

- 아래와 같이 넣으면 돼요.

{% highlight html %}
@media (prefers-color-scheme: dark) {
    fieldset {
        background-color: darkslategray;
    }
}
:root {
    color-scheme: dark light;

/* 명시적 light 모드 */
    color-scheme: only light;
}
<meta name="color-scheme" content="light dark">
{% endhighlight %}

- 추가적으로 크롬 데스크탑 브라우저에서 안드로이드의 강제 다크모드를 디버그 하고 싶다면 크롬에서 chrome://flags/ 에 들어가서 Auto Dark Mode for Web Contents 옵션을 Enabled로 변경하고 테스트해 보면 돼요.


### 그 외에 자잘한 이슈들 혹은 레슨런

iOS에서 overflow: hidden과 border-radius 속성을 적용하려면 isolation: isolate를 잊으면 안돼요.

iOS safari에서는 요소를 레이어링하는 메커니즘인 쌓임맥락이 다른 브라우저들과 다르기 때문에 isolate 옵션을 통해서 overflow hidden을 적용하고자 하는 요소에 쌓임 맥락을 격리해 주면 돼요.

전체 화면을 덮는 모달 같은 것이 요구사항에 있다면 히스토리 API 조작을 해야 해요.

안드로이드 유저들은 뒤로 가기 버튼을 눌러서 모달을 끄거나 페이지를 나가는 것이 익숙한 방식인데, 히스토리 조작을 하지 않는다면 뒤로 가기 버튼을 눌렀을 때 페이지를 이탈해 버려요.

이건 큰 이슈이기 때문에 히스토리 조작을 해서 모달을 켤 때 history.pushState 해주고, popstate 이벤트 리스너를 붙여서 popstate가 일어날 때 모달을 닫아주기만 하면 돼요.

안드로이드에서 Video Tag에 백그라운드 컬러가 원하는 컬러가 적용되지 않는 현상

모바일 디바이스에서 사용되는 GPU (그래픽카드)에 따라서 보이는 RGB 값에 제한이 있는 경우가 있어요. 색을 전부 표현하지 못하고 제한시켜서 보여주는 현상이 있어요.

랜딩 페이지 같은 경우에는 비디오 태그에 대비를 살짝 늘리는 방식으로 해결했는데, 모든 안드로이드 기기에 다 대응이 될지는 모르겠어요. 테스트폰에서는 대응이 됐어요.

filter: contrast(101%);

참고: https://stackoverflow.com/questions/35214962/html5-video-background-color-not-matching-background-color-of-website-in-some

### iOS 모바일 기기에서 요소에 터치할 때 나오는 음영에 대해서

- iOS 모바일 기기에서 버튼과 같은 요소 터치하면 검은색 배경이 잡히는 현상이 있어요. 아래와 같이 스타일을 주면 없앨 수 있어요.

{% highlight html %}
* {
  -webkit-tap-highlight-color:rgba(255,255,255,0);
  }
{% endhighlight %}



### 모바일 기기에서 핀치 줌 막기

- 리브랜딩 페이지와 같이 일관된 경험이 중요한 페이지에서 유저가 임의로 줌을 해서 이상한 경험하는 것을 막고 싶다면 아래와 같은 메타 태그를 작성해서 막을 수 있어요.

{% highlight html %}
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0, minimum-scale=1, user-scalable=0">
{% endhighlight %}

[danggn-rebranding]: https://medium.com/daangn/%EB%8B%B9%EA%B7%BC-%EB%A6%AC%EB%B8%8C%EB%9E%9C%EB%94%A9-%EC%BA%A0%ED%8E%98%EC%9D%B8-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-%EB%B0%B0%EC%9A%B4-%EA%B2%83-b41d866df9b7
